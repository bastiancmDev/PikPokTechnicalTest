//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


using System;
using System.Runtime.InteropServices;

namespace Noesis
{

public class RiveControl : FrameworkElement {
  internal new static RiveControl CreateProxy(IntPtr cPtr, bool cMemoryOwn) {
    return new RiveControl(cPtr, cMemoryOwn);
  }

  internal RiveControl(IntPtr cPtr, bool cMemoryOwn) : base(cPtr, cMemoryOwn) {
  }

  internal static HandleRef getCPtr(RiveControl obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  public RiveControl() {
  }

  protected override IntPtr CreateCPtr(Type type, out bool registerExtend) {
    registerExtend = false;
    return NoesisGUI_PINVOKE.new_RiveControl();
  }

  public void SetInputValue(string name, object value) {
    NoesisGUI_PINVOKE.RiveControl_SetInputValue(swigCPtr, name != null ? name : string.Empty, Noesis.Extend.GetInstanceHandle(value));
  }

  public void FireInputTrigger(string name) {
    NoesisGUI_PINVOKE.RiveControl_FireInputTrigger(swigCPtr, name != null ? name : string.Empty);
  }

  public uint GetSourceInputCount() {
    uint ret = NoesisGUI_PINVOKE.RiveControl_GetSourceInputCount(swigCPtr);
    return ret;
  }

  public string GetSourceInput(uint index, out RiveSourceInputType type) {
    IntPtr strPtr = NoesisGUI_PINVOKE.RiveControl_GetSourceInput(swigCPtr, index, out type);
    string str = Noesis.Extend.StringFromNativeUtf8(strPtr);
    return str;
  }

  public static DependencyProperty SourceProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.RiveControl_SourceProperty_get();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty StateProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.RiveControl_StateProperty_get();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty StretchProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.RiveControl_StretchProperty_get();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public Uri Source {
    set {
      NoesisGUI_PINVOKE.RiveControl_Source_set(swigCPtr, value != null ? value.OriginalString : string.Empty);
    }
    get {
      IntPtr uriPtr = NoesisGUI_PINVOKE.RiveControl_Source_get(swigCPtr);
      string uri = Noesis.Extend.StringFromNativeUtf8(uriPtr);
      return new Uri(uri, UriKind.RelativeOrAbsolute);
    }
  }

  public string State {
    get {
      IntPtr strPtr = NoesisGUI_PINVOKE.RiveControl_State_get(swigCPtr);
      string str = Noesis.Extend.StringFromNativeUtf8(strPtr);
      return str;
    }
  }

  public Stretch Stretch {
    set {
      NoesisGUI_PINVOKE.RiveControl_Stretch_set(swigCPtr, (int)value);
    } 
    get {
      Stretch ret = (Stretch)NoesisGUI_PINVOKE.RiveControl_Stretch_get(swigCPtr);
      return ret;
    } 
  }

  public RiveInputCollection Inputs {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.RiveControl_Inputs_get(swigCPtr);
      return (RiveInputCollection)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

}

}

